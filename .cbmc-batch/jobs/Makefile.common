# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use
# this file except in compliance with the License. A copy of the License is
# located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing permissions and
# limitations under the License.

SHELL=/bin/bash

default: report

# if Makefile.local exists, use it. This provides a way to override the defaults
sinclude Makefile.local

################################################################
# Define some constants that are hard to reference otherwise
SPACE :=$() $()
COMMA :=,

################################################################
# Useful functions

################################################################
# Setup paths to binaries
# By default, use the version on your path; this can be overriden to select particular
# versions of the tools. /usr/bin/goto-analyzer or ${HOME}/sw/goto-analyzer etc
GOTO_ANALYZER ?= goto-analyzer
GOTO_CC ?= goto-cc
GOTO_INSTRUMENT ?= goto-instrument
VIEWER ?= cbmc-viewer

################################################################
# Define locations and binaries
ABSTRACTIONS ?= ""
HARNESS_NAME ?= $(ENTRY).c

################################################################
# Default CBMC flags

#debugability
CBMC_VERBOSITY ?= ""
CBMCFLAGS += --flush

#error checking
CBMCFLAGS += --bounds-check
CBMCFLAGS += --conversion-check
CBMCFLAGS += --div-by-zero-check
#CBMCFLAGS += --enum-range-check
CBMCFLAGS += --float-overflow-check
CBMCFLAGS += --nan-check
CBMCFLAGS += --pointer-check
CBMCFLAGS += --pointer-overflow-check
CBMCFLAGS += --pointer-primitive-check
CBMCFLAGS += --signed-overflow-check
CBMCFLAGS += --undefined-shift-check
CBMCFLAGS += --unsigned-overflow-check
CBMCFLAGS += --unwind 1
CBMCFLAGS += --unwinding-assertions


################################################################
# Preprocess the unwindset
ifneq ($(UNWINDSET),)
CBMC_UNWINDSET := --unwindset $(subst $(SPACE),$(COMMA),$(strip $(UNWINDSET)))
endif
CBMCFLAGS += $(CBMC_UNWINDSET)

################################################################
# Set C compiler defines
CBMC_OBJECT_BITS ?= 8
CBMCFLAGS +=  --object-bits $(CBMC_OBJECT_BITS)
DEFINES += -DCBMC_OBJECT_BITS=$(CBMC_OBJECT_BITS)
DEFINES += -DCBMC=1

################################################################
# Setup directory aliases

PROOF_ROOT ?= $(dir $(abspath $(filter %/Makefile.common,$(MAKEFILE_LIST))))
BASEDIR ?= $(abspath $(PROOF_ROOT)/../..)
SRCDIR ?= $(abspath ./link-farm)
SDKDIR ?= $(abspath $(PROOF_ROOT)/../..)
HELPERDIR ?= $(SDKDIR)/.cbmc-batch
LINKFARM = $(abspath ./link-farm)
COMMON_REPO_NAME ?= aws-c-common-for-cryptosdk-proofs
COMMONDIR ?= $(BASEDIR)/$(COMMON_REPO_NAME)
COMMON_HELPERDIR ?= $(COMMONDIR)/.cbmc-batch

LITANI ?= $(PROOF_ROOT)/../litani/litani

################################################################
# Setup include directory order
# Helper-inc must go first, so it can override other includes.
INC += -I$(SRCDIR)/helper-inc
INC += -I$(SRCDIR)/c-enc-sdk-inc
INC += -I$(SRCDIR)/c-common-inc
INC += -I$(SRCDIR)/c-common-helper-inc

################################################################
# Temporarily disable UNWIND_GOTO, SIMPLIFY until the feature is
# stable
UNWIND_GOTO ?= 0
SIMPLIFY ?= 0

################################################################
# Enables costly checks (e.g. ones that contain loops)
# Don't execute deep checks by default
AWS_DEEP_CHECKS ?= 0
DEFINES += -DAWS_DEEP_CHECKS=$(AWS_DEEP_CHECKS)

################################################################
# We always override allocator functions with our own allocator
# Removing the function from the goto program helps CBMC's
# function pointer analysis.
REMOVE_FUNCTION_BODY += --remove-function-body aws_default_allocator
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_allocate
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_copy_description
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_deallocate
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_preferred_size
REMOVE_FUNCTION_BODY += --remove-function-body s_cf_allocator_reallocate
REMOVE_FUNCTION_BODY += --remove-function-body s_default_calloc
REMOVE_FUNCTION_BODY += --remove-function-body s_default_free
REMOVE_FUNCTION_BODY += --remove-function-body s_default_malloc
REMOVE_FUNCTION_BODY += --remove-function-body s_default_realloc

################################################################
# We override abort() to be assert(0), as it is not caught by
# CBMC as a violation. This is in the link-farm c-common
ABSTRACTIONS += $(LINKFARM)/c-common-helper-stubs/abort_override_assert_false.c
REMOVE_FUNCTION_BODY += --remove-function-body abort
################################################################

REMOVE_FUNCTION_BODY += $(ADDITIONAL_REMOVE_FUNCTION_BODY)
DEPENDENT_GOTOS = $(patsubst %.c,%.goto,$(DEPENDENCIES))

################################################################
# makes a symlink if one doesn't already exist
# make_symlink where src dest
define make_symlink
	@ cd $(1) ; \
	if [ ! -h $(3) ] ; then \
	  ln -s $(2) $(3) ; \
	fi
endef

################ Clone the necessary repos
common-git:
	@if [ ! -d $(COMMONDIR) ] ;\
	then \
	  cd $(BASEDIR); \
	  git clone --quiet --depth 30 https://github.com/awslabs/aws-c-common.git $(COMMONDIR); \
    cd $(COMMON_REPO_NAME); \
    git reset --hard dd600468fbd25c6f31828010c28056c4d5c3ab35; \
	else \
	  echo "c-common repo already exists; not cloning."; \
	fi

$(LINKFARM):
	mkdir -p $@

# If we have dangling links here, batch is not happy. So make them as needed.
common-symlinks: $(LINKFARM)
	$(call make_symlink, $(LINKFARM), $(COMMONDIR)/include, c-common-inc)
	$(call make_symlink, $(LINKFARM), $(COMMONDIR)/source, c-common-src)

common-helper-symlinks: $(LINKFARM)
	$(call make_symlink, $(LINKFARM), $(COMMON_HELPERDIR)/include, c-common-helper-inc)
	$(call make_symlink, $(LINKFARM), $(COMMON_HELPERDIR)/source, c-common-helper-src)
	$(call make_symlink, $(LINKFARM), $(COMMON_HELPERDIR)/stubs, c-common-helper-stubs)
	$(call make_symlink, $(LINKFARM), $(COMMON_HELPERDIR)/uninline, c-common-helper-uninline)

enc-sdk-symlinks: $(LINKFARM)
	$(call make_symlink, $(LINKFARM), $(SDKDIR)/include, c-enc-sdk-inc)
	$(call make_symlink, $(LINKFARM), $(SDKDIR)/source, c-enc-sdk-src)

harness-symlink: $(LINKFARM)
	$(call make_symlink, $(LINKFARM), ../$(HARNESS_NAME), $(HARNESS_NAME));

helper-symlinks: $(LINKFARM)
	$(call make_symlink, $(LINKFARM), $(HELPERDIR)/include, helper-inc)
	$(call make_symlink, $(LINKFARM), $(HELPERDIR)/source, helper-src)
	$(call make_symlink, $(LINKFARM), $(HELPERDIR)/stubs, helper-stubs)


fill-linkfarm: harness-symlink enc-sdk-symlinks common-symlinks common-helper-symlinks helper-symlinks

################################################################
# Other libraries that use this Makefile template may wish to do
# actual work here
setup_dependencies: fill-linkfarm

# Here, whenever there is a change in any of ANSI-C source
# dependency files, make will take action. However, to make
# sure changes in the headers files will also trigger make,
# the user must run make clean first.
$(GOTO_DIR)/$(ENTRY)0.goto: setup_dependencies $(CWD)/$(ENTRY).c $(DEPENDENT_GOTOS)
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): building initial goto-binary"\
	  --command \
	    '$(GOTO_CC) $(ENTRY).c $(DEPENDENT_GOTOS) \
	      --export-function-local-symbols $(CBMC_VERBOSITY) \
	      --function $(ENTRY) $(DEPENDENT_GOTOS) $(INC) $(DEFINES) -o $@'

# Removes specified function bodies. This allows us to replace
# function definitions with ABSTRACTIONS.
$(GOTO_DIR)/$(ENTRY)1.goto: $(GOTO_DIR)/$(ENTRY)0.goto
ifeq ($(REMOVE_FUNCTION_BODY), "")
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): not removing function bodies"\
	  --command 'cp $< $@'
else
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): removing function bodies"\
	  --command '$(GOTO_INSTRUMENT) $(REMOVE_FUNCTION_BODY) $< $@'
endif


# ABSTRACTIONS is a list of function stubs to use. If a function body
# is missing and is not abstracted, then it returnes a non
# deterministic value.
$(GOTO_DIR)/$(ENTRY)2.goto: $(GOTO_DIR)/$(ENTRY)1.goto
ifeq ($(ABSTRACTIONS), "")
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): not implementing abstractions"\
	  --command 'cp $< $@'
else
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): linking in abstractions" \
	  --command \
	    '$(GOTO_CC) --function $(ENTRY) $(ABSTRACTIONS) $< $(INC) $(DEFINES) -o $@'
endif

## Temporarily skipped steps

# Simplify and constant propagation may benefit from unwinding first
$(GOTO_DIR)/$(ENTRY)3.goto: $(GOTO_DIR)/$(ENTRY)2.goto
ifeq ($(UNWIND_GOTO), 1)
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): unwinding loops"\
	  --command '$(GOTO_INSTRUMENT) $(UNWINDING) $< $@'
else
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): not unwinding loops"\
	  --command 'cp $< $@'
endif

# Skip simplify (and hence generate-function-body) until missing source locations debugged
$(GOTO_DIR)/$(ENTRY)4.goto: $(GOTO_DIR)/$(ENTRY)3.goto
ifeq ($(SIMPLIFY), 1)
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): generating bodies for functions"\
	  --command '$(GOTO_INSTRUMENT) --generate-function-body '.*' $< $@'
else
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): not generating bodies for functions"\
	  --command 'cp $< $@'
endif

# Skip simplify (and hence generate-function-body) until missing source locations debugged
$(GOTO_DIR)/$(ENTRY)5.goto: $(GOTO_DIR)/$(ENTRY)4.goto
ifeq ($(SIMPLIFY), 1)
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): simplifying goto program"\
	  --command '$(GOTO_ANALYZER) --simplify $@ $<'
else
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): not simplifying goto program"\
	  --command 'cp $< $@'
endif

# Simplify the goto program by removing any unused function bodies
$(GOTO_DIR)/$(ENTRY)6.goto: $(GOTO_DIR)/$(ENTRY)5.goto
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): dropping unused functions"\
	  --command '$(GOTO_INSTRUMENT) --drop-unused-functions $< $@'

# Simplify the goto program by slicing away initializations of unused
# global variables
$(GOTO_DIR)/$(ENTRY)7.goto: $(GOTO_DIR)/$(ENTRY)6.goto
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): slicing inits of unused globals" \
	  --command '$(GOTO_INSTRUMENT) --slice-global-inits $< $@'

$(GOTO_DIR)/$(ENTRY).goto: $(GOTO_DIR)/$(ENTRY)7.goto
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): copying final goto-binary" \
	  --command 'cp $< $@'

# Catch-all used for building goto-binaries of the individual
# dependencies, which are then linked in the $(ENTRY)0.goto rule above.
# This builds each dependency of each proof under the gotos subdirectory
# of that proof, so that the same dependency can be built for multiple
# proofs.
%.goto: %.c
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage build \
	  --interleave-stdout-stderr \
	  --description "$(ENTRY): building dependency '$(basename $@)'" \
	  --command \
	    'mkdir -p $(dirname $@) && \
	     $(GOTO_CC) -c $< --export-function-local-symbols $(CBMC_VERBOSITY) \
	       $(INC) $(DEFINES) -o $@'

goto: $(ENTRY).goto

$(CWD)/cbmc.log: $(GOTO_DIR)/$(ENTRY).goto
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage test \
	  --interleave-stdout-stderr \
	  --stdout-file $@ \
	  --description "$(ENTRY): running safety checks" \
	  --tags "stats-group:safety checks" \
	  --ignore-returns 10 \
	  --command 'cbmc $(CBMCFLAGS) --trace'

$(CWD)/property.xml: $(GOTO_DIR)/$(ENTRY).goto
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage test \
	  --interleave-stdout-stderr \
	  --stdout-file $@ \
	  --description "$(ENTRY): printing properties" \
	  --command 'cbmc $(CBMCFLAGS) --show-properties --xml-ui $<'

$(CWD)/coverage.xml: $(GOTO_DIR)/$(ENTRY).goto
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $@ \
	  --pipeline-name $(ENTRY) \
	  --ci-stage test \
	  --interleave-stdout-stderr \
	  --stdout-file $@ \
	  --tags "stats-group:coverage computation" \
	  --description "$(ENTRY): computing coverage" \
	  --command \
	    'cbmc $(filter-out --unwinding-assertions,$(CBMCFLAGS)) --cover location --xml-ui $<'

cbmc: cbmc.log

property: property.xml

coverage: coverage.xml

_report: $(CWD)/cbmc.log $(CWD)/property.xml $(CWD)/coverage.xml
	$(LITANI) add-job \
	  --inputs $^ \
	  --outputs $(CWD)/html \
	  --pipeline-name $(ENTRY) \
	  --ci-stage report \
	  --interleave-stdout-stderr \
	  --tags "stats-group:report generation" \
	  --description "$(ENTRY): generating report" \
	  --command \
	    '$(VIEWER) \
	      --block $(CWD)/coverage.xml \
	      --goto $(ENTRY).goto \
	      --htmldir $(CWD)/html \
	      --property $(CWD)/property.xml \
	      --result $(CWD)/cbmc.log \
	      --srcdir $(SRCDIR) \
	      --srcexclude "(./verification|./tests|./tools|./lib/third_party)"'

propertyreport: cbmc.log property.xml
	$(VIEWER) \
	--goto $(ENTRY).goto \
	--htmldir html \
	--property property.xml \
	--result cbmc.log \
	--srcdir $(SRCDIR) \
	--srcexclude '(./verification|./tests|./tools|./lib/third_party)'

clean:
	$(RM) *.goto
	$(RM) $(DEPENDENT_GOTOS)
	$(RM) *.log
	$(RM) cbmc.log property.xml coverage.xml TAGS-*
	$(RM) *~ \#*

veryclean: clean
	$(RM) -r html
	$(RM) -r link-farm

gitclean: veryclean
	$(RM) -r $(COMMONDIR)

litani-path:
	@echo $(LITANI)

.PHONY: cbmc property coverage report clean veryclean common-symlinks common-git harness-symlink fill-linkfarm helper-symlinks ci-yaml

.PHONY: setup_dependencies cbmc property coverage report clean veryclean litani-path

include $(HELPERDIR)/jobs/Makefile.cbmc_batch
